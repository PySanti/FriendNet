// Pasos generales:
    // Fase 3: Arreglar problemas de logica restantes 
    // Fase 4: Centrarnos en detalles finales del estilo y responsive 

    // Fase 5: Realizar un periodo de prueba exaustivo y reunir todos los fallos, nuevas features que queramos agregar, etc ... 
    // Para realizar un buen testing, eliminar toda la cache del navegador

    // Fase 6: Realizar otro periodo de prueba pero con la aplicacion montada y revisar todos los detalles posibles 


// fase 3:
    // hacer que, cuando se desmonte el apps.jsx se limpie el localStorage


    // agregar funcionalidad para eliminar websocket de notificaciones cuando se redirije al root

    // revisar posibles vulnerabilidades en : SendActivationEmail (limitar cantidad de emails enviados para evitar caida del server), 
    // ActivateUser, ChangeEmailForActivation, GetUserDetail 

    // agregar seguridad a GetUsersList : como esta ahora, cualquiera puede saber quien a escrito a quien

    // revisar sistema de uso de userKeyword, cada vez que se cambia esa vriable se vuelve a renderizar el componente


    // revisar problemas de rendimiento de red en el userList y getMessagesHistorial (muy lento)

    // revisar error que ocurre cuando se cargan todas las paginas de los usuarios y, al buscar a pysanti, aparecen 2

    // solucionar error que permite que el mismo usuario se logee dos veces desde dos navegadores diferentes


    // mejorar sistema de uso de validateJwt : no tiene sentido que hagamos siempre lo mismo, DRY

    // testear bien funcionalidad de userList y userFilter dado el cambio realizado para el uso de websockets



    // buscar o repasar funcionamiento de :
        // annotate
        // agreggate
        // Case
        // When
        // Case -> default
        // When -> then
    
    // repasar funcionamiento de:
        // channels 3.0.4
        // asgi y wsgi ( por que se pone http en la application del asgi )
        // protocolo de websocket
        // django channels
        // http vs ws (comunicacion persistente)
        // handshake
        // asgi applications
        // ProtocolTypeRouter (enrutador de protocolos)
        // Que es un router
        // pasos para implementacion de channels / websockets
        // channel layers (concepto teorico y practico)
        // grupos
        // redis
        // pasos para implementacion de channel-layers
        // async_to_sync
        // broadcasting function (group_send) (investigar mas)
        // channel name
        // iife

    // realizar un proceso de testeo, haciendo una lista de todas y cada una de las funcionalidades de la aplicacion
    // y realizando un proceso de testing por cada una, que incluya uso de consolelog's para asegurarnos
    // de que todo funciona como lo esperado







// Fase 4:
    // hacer que, cuando se active el bigger-img, el fondo se ponga opaco
    // asignar loaders en todos los puntos en los que se hagan solicitudes
    // asignar un loader mientras las imagenes no cargan
    // arreglar problemas de espacio con mensajes de error en formularios
    // mejorar estilos de visualizacion de user-photo big
    // dar estilos a los globes
    // terminar previsualizacion de contrasenia
    // arreglar error de estilo al acceder a chat directamente desde notification
    // agregar overflow hidden al message container
    // modificar Nombres de Documents y icono de la pagina
    // darle estilos personalizados a todo lo que este por default (inputs)
    //  Agregar estilos cuando se use el tab en formularios, para buttons e inputs
    // solucionar problema de home al cargar chat (el header se sale de la pantalla)
    // modificar estilos de los backButtons
    // hacer comprobaciones de existencia antes de hacer llamados a componentes para evitar ejecuciones de funciones innecesarias
    // agregar ambos signos de interrogacion y exclamacion
    // agregar animcion bien arrecha en la palabra FriendNet del home unloged
    // agregar modo obscuro y claro
    // agregar mensajes de error mas carismaticos pero a la vez serios
    // buscar logos para la aplicacion
    // revisar y mejorar mensajes de buttons
    // tener muy en cuenta la portabilidad de la app con los estilos
    // crear modo obscuro
    // darle estilos a mensaje de error en el usersList
    // mejorar estilos de correo de activacion
    // hacer que la bigger-img del userPhoto tenga object-fit : contain
    // hacer que si el usuario cambia algun dato del perfil, se cambien los estilos del boton de actualizacion
    // darle un espacio en el DOM Por defecto al input-error del UserPhoto
    // darle estilos al loader del usersList
    // agrear codigo en caso de que no se haya seleccionado ningun chatingUser en el componente Chat, algo asi como "Selecciona un usuario para chatear"
    // arreglar errror que sucede cuando el usuario recarga la lista de mensajes hacia arriba
    // solucionar error de estilo generado cuando el usuario quiere selccionar el texto que le facilita el navegador en un input
    // reactivar el notificationBell del componente NotificationsContainer
    // agregar sonidos cuando llgue una notificacion
    // hacer que el notification-bell tenga un numero encima que represente la cantidad de notificaciones

    
// Fase 5:
    // centrarnos en testear bien las imagenes (calidad, tiempos de carga, portabilidad )
    // testear bien UserFilter y buscar mas maneras de optimizar
    // revisar soporte para refresco automatico de token de acceso y refresco en todas las secured api's
    // revisar bien la seguridad de las apis, parte sumamente importante. Buscar vulnerabilidad california (usar postman)



//Produccion:
    // implementar redis
    // centrarnos en testear bien las imagenes
    // encriptar datos en smtpjs
    // comprobar funcionamiento en todos los navegadores y con todas las resoluciones
    // pruebas unitarias
    // investigar sobre seguridad para proyectos django
    // repasar todo lo aprendido en el proyecto, revisando todo el mismo
    // agrgar documentacion a la api
    // estudiar mas a fondo los serializers
    // refactorizar la distribucion de los archivos, meter applications en FriendNet
    // para carga de imagenes mas rapida en io's usar formato heic al cargar imagenes
    // implementar https para myor seguridad
    // una vez que el proyecto este completamente terminado, eliminar todos los logs del front y back
    // a la hora de montar el proyecto en produccion, investigar bien como funciona todo el proceso de montado de backend's
    // cuando terminemos el proyecto por completo, revisar cada linea de codigo, cada paquete, cada todo que hayamos empleado para repasar lo maximo posible
    // cambiar el nombre del proyecto
