// Pasos generales:
    // Fase 3: Arreglar problemas de logica restantes 
    // Fase 4: Centrarnos en detalles finales del estilo y responsive 

    // Fase 5: Realizar un periodo de prueba exaustivo y reunir todos los fallos, nuevas features que queramos agregar, etc ... 
    // Para realizar un buen testing, eliminar toda la cache del navegador

    // Fase 6: Realizar otro periodo de prueba pero con la aplicacion montada y revisar todos los detalles posibles 


// fase 3:
    // revisar problemas de rendimiento de red en el userList y getMessagesHistorial (muy lento)

    // implementar mas iief

    // react profiler y datadog

    // buscar o repasar funcionamiento de :
        // annotate
        // agreggate
        // Case
        // When
        // Case -> default
        // When -> then

    // repasar funcionamiento de:
        // channels 3.0.4
        // asgi y wsgi ( por que se pone http en la application del asgi )
        // protocolo de websocket
        // django channels
        // http vs ws (comunicacion persistente)
        // handshake
        // asgi applications
        // ProtocolTypeRouter (enrutador de protocolos)
        // Que es un router
        // pasos para implementacion de channels / websockets
        // channel layers (concepto teorico y practico)
        // grupos
        // redis
        // pasos para implementacion de channel-layers
        // async_to_sync
        // broadcasting function (group_send) (investigar mas)
        // channel name
        // iife


    // repasar zustand

    // Lista de funcionalidades:
        //
        // Ws Utils de Notifications:
        //              get_openned_groups_with_id
        //              notifications_websocket_is_opened
        //
        // Notifications Consumer:
        //              revisar tiempos de vida del websocket de notificaciones, debe estar activo cuando el usuario se vaya del home y recargue la pagina
        //              connect
        //              disconnect
        //              receive
        //              Todas las funcionalidades en todos los contextos
        //
        // Notifications Manager:
        //              hasNotification
        //              addNotification
        //              deleteNotification
        //
        //  Notifications Views:
        //              notificationDeleteApi
        //
        // Usuarios Api Cloudinary:
        //              save_image_cloudinary
        //              delete_image_cloudinary
        //
        // Usuarios utils:
        //              get_image_size
        //              get_public_id
        //              load_cloudinary_secrets
        //              set_photo_link
        // Usuarios websockets utils:
        //              broadcast_updated_user
        //              get_notifications_groups
        //
        // Usuarios jwt_views
        // Usuarios manager:
        //
        //                  _create_user
        //                  create_superuser
        //                  create_user
        //                  user_is_online
        //                  activateUser
        //                  getFormatedNotifications
        //                  getFormatedUserData
        //                  changePassword
        //                  userExists
        //                  updateUser
        //                  setEmail
        //
        //  Usuarios views:
        //
        //                  CheckExistingUserAPI
        //                  CreateUsuariosAPI
        //                  GetUserDetailAPI
        //                  GetUsersListAPI
        //                  ChangeEmailForActivationAPI
        //                  ActivateUserAPI
        //                  SendActivationEmailAPI
        //                  LoginUserAPI
        //                  UpdateUserDataAPI
        //                  ChangeUserPwdAPI
        //                  UserIsOnlineAPI
        //                  EnterChatApi
        //  Client Apis:
        //                  activateUser.api.js
        //                  baseConfig.api.js
        //                  changeEmailForActivation.api.js
        //                  changePwd.api.js
        //                  checkExistingUser.api.js
        //                  createUsuario.api.js
        //                  enterChat.api.js
        //                  getMessagesHistorial.api.js
        //                  getUserDetailApi.api.js
        //                  getUsersList.api.js
        //                  loginUser.api.js
        //                  notificationDelete.api.js
        //                  refreshToken.api.js
        //                  sendActivationEmail.api.js
        //                  sendMsg.api.js
        //                  updateUserData.api.js
        //                  userIsOnline.api.js
        // client Components:
        //                  ActivationCodeField.jsx
        //                  Button.jsx
        //                  ChatingUserHeader.jsx
        //                  Chat.jsx
        //                  EmailField.jsx
        //                  FormField.jsx
        //                  Form.jsx
        //                  Header.jsx
        //                  InputError.jsx
        //                  Label.jsx
        //                  Loader.jsx
        //                  LoginForm.jsx
        //                  Message.jsx
        //                  MessagesContainer.jsx
        //                  MsgSendingInput.jsx
        //                  Notification.jsx
        //                  NotificationsContainer.jsx
        //                  PasswordField.jsx
        //                  UserButton.jsx
        //                  UserData.jsx
        //                  UserFilter.jsx
        //                  UserInfoForm.jsx
        //                  UsernameField.jsx
        //                  UserPhoto.jsx
        //                  UsersList.jsx (revisar activacion no deseada del loaderActivated)
        //  client pages:
        //                  AccountActivation.jsx (revisar el envio masivo de activations code)
        //                  ChangeEmailForActivation.jsx
        //                  ChangePwd.jsx
        //                  Home.jsx
        //                  Login.jsx
        //                  Profile.jsx
        //                  Root.jsx
        //                  SignUp.jsx
        //                  UserLogged.jsx
        //                  UserNotLogged.jsx
        // client Store:
        //                  chatGlobeListStore.jsx
        //                  clickedUserStore.jsx
        //                  lastClickedUserStore.jsx
        //                  loadingStateStore.jsx
        //                  messagesHistorialStore.jsx
        //                  notificationsStore.jsx
        //                  usersListStore.jsx
        //  client utils:
        //                 ChatWSGroupCreationMsg.js
        //                 ChatWSInitialize.js
        //                 checkImageFormat.js
        //                 constants.js
        //                 dataIsDiferent.js
        //                 diferentUserHasBeenClicked.js
        //                 disconnectWebsocket.js
        //                 executeSecuredApi.js
        //                 generateActivationCode.js
        //                 getChatGlobesList.js
        //                 getJWTFromLocalStorage.js
        //                 getNotificationsFromLocalStorage.js
        //                 getRelatedNotification.js
        //                 getUserDataFromLocalStorage.js
        //                 handleStandardApiErrors.js
        //                 loginUser.js
        //                 logoutUser.js
        //                 NotificationsWSGroupCreationMsg.js
        //                 NotificationsWSInitialize.js
        //                 redirectExpiredUser.js
        //                 refreshToken.js
        //                 removeAndUpdateNotifications.js
        //                 removeNotificationFromLocalStorage.js
        //                 saveNotificationsInLocalStorage.js
        //                 saveUserDataInLocalStorage.js
        //                 updateMessagesHistorial.js
        //                 userIsAuthenticated.js
        //
        //
        // repasar el base.py, local.py
        // read_secret_data
    
    //Estandar de testing:
    //    ~ Lectura del codigo para entendimiento
    //    ~ Revision de documentacion y actualizar en caso de ser necesario
    //    ~ Revisar argumentos e implementaciones de la funcionalidad para asegurarnos de que la integracion esta bien
    //    ~ Refactorizar si se quiere
    //    ~ Realizar uso de la funcionalidad implementando logs para asegurarnos de todo
    //
    //    Para api's:
    //        ~ Revisar ademas todos y cada uno de las implementaciones de la api usando raise Exception
    //        para revisar el manejo de errores del front. Revisar ademas el rate limiter de cada api
    //    
    //    Para websockets:
    //        ~ Si el broadcasting de alguna funcionalidad del websocket puede soportar muchos Usuarios
    //        testearse para ese caso

    // Testear websockets con muchos puertos






// Fase 4:
    // hacer que, cuando se active el bigger-img, el fondo se ponga opaco
    // asignar loaders en todos los puntos en los que se hagan solicitudes
    // asignar un loader mientras las imagenes no cargan
    // arreglar problemas de espacio con mensajes de error en formularios
    // mejorar estilos de visualizacion de user-photo big
    // dar estilos a los globes
    // terminar previsualizacion de contrasenia
    // arreglar error de estilo al acceder a chat directamente desde notification
    // agregar overflow hidden al message container
    // modificar Nombres de Documents y icono de la pagina
    // darle estilos personalizados a todo lo que este por default (inputs)
    //  Agregar estilos cuando se use el tab en formularios, para buttons e inputs
    // solucionar problema de home al cargar chat (el header se sale de la pantalla)
    // modificar estilos de los backButtons
    // hacer comprobaciones de existencia antes de hacer llamados a componentes para evitar ejecuciones de funciones innecesarias
    // agregar ambos signos de interrogacion y exclamacion
    // agregar animcion bien arrecha en la palabra FriendNet del home unloged
    // agregar modo obscuro y claro
    // agregar mensajes de error mas carismaticos pero a la vez serios
    // buscar logos para la aplicacion
    // revisar y mejorar mensajes de buttons
    // tener muy en cuenta la portabilidad de la app con los estilos
    // crear modo obscuro
    // darle estilos a mensaje de error en el usersList
    // mejorar estilos de correo de activacion
    // hacer que la bigger-img del userPhoto tenga object-fit : contain
    // hacer que si el usuario cambia algun dato del perfil, se cambien los estilos del boton de actualizacion
    // darle un espacio en el DOM Por defecto al input-error del UserPhoto
    // darle estilos al loader del usersList
    // agrear codigo en caso de que no se haya seleccionado ningun chatingUser en el componente Chat, algo asi como "Selecciona un usuario para chatear"
    // arreglar errror que sucede cuando el usuario recarga la lista de mensajes hacia arriba
    // solucionar error de estilo generado cuando el usuario quiere selccionar el texto que le facilita el navegador en un input
    // reactivar el notificationBell del componente NotificationsContainer
    // agregar sonidos cuando llgue una notificacion
    // hacer que el notification-bell tenga un numero encima que represente la cantidad de notificaciones
    // revisar errores ortograficos

    // hacer que, al recargar la lista de mensajes, que se quede el scroller donde estaba


// Fase 5:
    // centrarnos en testear bien las imagenes (calidad, tiempos de carga, portabilidad )
    // testear bien UserFilter y buscar mas maneras de optimizar
    // revisar soporte para refresco automatico de token de acceso y refresco en todas las secured api's
    // revisar bien la seguridad de las apis, parte sumamente importante. Buscar vulnerabilidad california (usar postman)
    // revisar bien el manejo de errores en todas las apis del lado del back y front (importante) (manejo de errores inesperados)



//Produccion:
    // implementar redis
    // centrarnos en testear bien las imagenes
    // encriptar datos en smtpjs
    // comprobar funcionamiento en todos los navegadores y con todas las resoluciones
    // pruebas unitarias
    // investigar sobre seguridad para proyectos django
    // repasar todo lo aprendido en el proyecto, revisando todo el mismo
    // agrgar documentacion a la api
    // estudiar mas a fondo los serializers
    // refactorizar la distribucion de los archivos, meter applications en FriendNet
    // para carga de imagenes mas rapida en io's usar formato heic al cargar imagenes
    // implementar https para myor seguridad
    // una vez que el proyecto este completamente terminado, eliminar todos los logs del front y back
    // a la hora de montar el proyecto en produccion, investigar bien como funciona todo el proceso de montado de backend's
    // cuando terminemos el proyecto por completo, revisar cada linea de codigo, cada paquete, cada todo que hayamos empleado para repasar lo maximo posible
    // cambiar el nombre del proyecto
    // eliminar codigo inutil
