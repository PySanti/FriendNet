// Pasos generales:
    // Fase 3: Arreglar problemas de logica restantes 
    // Fase 4: Centrarnos en detalles finales del estilo y responsive 

    // Fase 5: Realizar un periodo de prueba exaustivo y reunir todos los fallos, nuevas features que queramos agregar, etc ... 
    // Para realizar un buen testing, eliminar toda la cache del navegador

    // Fase 6: Realizar otro periodo de prueba pero con la aplicacion montada y revisar todos los detalles posibles 


// fase 3:
    // * facil:
        // mejorar el comportamiento de algunos componentes a traves de mayor modularizacion

    //* medio:
        // agregar permission classes en el backedn y buscar que el usuario siempre se deslogee cuando se salga de la pagina
        // emplear validate para validaciones en el backend
        // mejorar sistema de envio de mensajes para mayor velocidad (cacheo de mensajes con websockets como con notificaciones)
        // solucionar problema de refresco de tokens (los errrores que salen de vez que cuando del authcontext)


    //* dificil
        // usar paginacion
        // encriptar formularios de react
        // usar webSockets para mensajes
        // user webSockets para actualizacion de notificaciones
        // revisar tiempo de vida de token de autenticacion (comportamiento una vez que la sesion este cerrada)
        // testear todas las funcionalidades de la aplicacion y hacer respectivos refactors



// Fase 4:
    // asignar loaders en todos los puntos en los que se hagan solicitudes
    // asignar un loader mientras las imagenes no cargan
    // arreglar problemas de espacio con mensajes de error en formularios
    // mejorar estilos de visualizacion de user-photo big
    // dar estilos a los globes
    // terminar previsualizacion de contrasenia
    // arreglar error de estilo al acceder a chat directamente desde notification
    // agregar overflow hidden al message container
    // modificar Nombres de Documents y icono de la pagina
    // darle estilos personalizados a todo lo que este por default (inputs)
    //  Agregar estilos cuando se use el tab en formularios, para buttons e inputs
    // solucionar problema de home al cargar chat (el header se sale de la pantalla)
    // modificar estilos de los backButtons
    // hacer comprobaciones de existencia antes de hacer llamados a componentes para evitar ejecuciones de funciones innecesarias
    // agregar ambos signos de interrogacion y exclamacion
    // agregar animcion bien arrecha en la palabra FriendNet del home unloged
    // agregar modo obscuro y claro
    // agregar mensajes de error mas carismaticos pero a la vez serios
    // buscar logos para la aplicacion
    // revisar y mejorar mensajes de buttons
    // tener muy en cuenta la portabilidad de la app con los estilos
    // crear modo obscuro
    // darle estilos a mensaje de error en el usersList
    // mejorar estilos de correo de activacion
    // hacer que la bigger-img del userPhoto tenga object-fit : contain
    // hacer que si el usuario cambia algun dato del perfil, se cambien los estilos del boton de actualizacion

// Fase 5:
    // centrarnos en testear bien las imagenes (calidad, tiempos de carga, portabilidad )
    // testear bien UserFilter y buscar mas maneras de optimizar



//Produccion:
    // centrarnos en testear bien las imagenes
    // encriptar datos en smtpjs
    // comprobar funcionamiento en todos los navegadores y con todas las resoluciones
    // pruebas unitarias
    // investigar sobre seguridad para proyectos django
    // repasar todo lo aprendido en el proyecto, revisando todo el mismo
    // agrgar documentacion a la api
    // estudiar mas a fondo los serializers
    // refactorizar la distribucion de los archivos, meter applications en FriendNet
    // para carga de imagenes mas rapida en io's usar formato heic al cargar imagenes

